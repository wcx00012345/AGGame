//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Script.Components.RotationComponent scriptComponentsRotation { get { return (Script.Components.RotationComponent)GetComponent(GameComponentsLookup.ScriptComponentsRotation); } }
    public bool hasScriptComponentsRotation { get { return HasComponent(GameComponentsLookup.ScriptComponentsRotation); } }

    public void AddScriptComponentsRotation(float newRot) {
        var index = GameComponentsLookup.ScriptComponentsRotation;
        var component = (Script.Components.RotationComponent)CreateComponent(index, typeof(Script.Components.RotationComponent));
        component.Rot = newRot;
        AddComponent(index, component);
    }

    public void ReplaceScriptComponentsRotation(float newRot) {
        var index = GameComponentsLookup.ScriptComponentsRotation;
        var component = (Script.Components.RotationComponent)CreateComponent(index, typeof(Script.Components.RotationComponent));
        component.Rot = newRot;
        ReplaceComponent(index, component);
    }

    public void RemoveScriptComponentsRotation() {
        RemoveComponent(GameComponentsLookup.ScriptComponentsRotation);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherScriptComponentsRotation;

    public static Entitas.IMatcher<GameEntity> ScriptComponentsRotation {
        get {
            if (_matcherScriptComponentsRotation == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ScriptComponentsRotation);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherScriptComponentsRotation = matcher;
            }

            return _matcherScriptComponentsRotation;
        }
    }
}
