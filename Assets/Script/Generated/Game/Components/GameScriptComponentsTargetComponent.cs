//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Script.Components.TargetComponent scriptComponentsTarget { get { return (Script.Components.TargetComponent)GetComponent(GameComponentsLookup.ScriptComponentsTarget); } }
    public bool hasScriptComponentsTarget { get { return HasComponent(GameComponentsLookup.ScriptComponentsTarget); } }

    public void AddScriptComponentsTarget(int newTargetId) {
        var index = GameComponentsLookup.ScriptComponentsTarget;
        var component = (Script.Components.TargetComponent)CreateComponent(index, typeof(Script.Components.TargetComponent));
        component.TargetId = newTargetId;
        AddComponent(index, component);
    }

    public void ReplaceScriptComponentsTarget(int newTargetId) {
        var index = GameComponentsLookup.ScriptComponentsTarget;
        var component = (Script.Components.TargetComponent)CreateComponent(index, typeof(Script.Components.TargetComponent));
        component.TargetId = newTargetId;
        ReplaceComponent(index, component);
    }

    public void RemoveScriptComponentsTarget() {
        RemoveComponent(GameComponentsLookup.ScriptComponentsTarget);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherScriptComponentsTarget;

    public static Entitas.IMatcher<GameEntity> ScriptComponentsTarget {
        get {
            if (_matcherScriptComponentsTarget == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ScriptComponentsTarget);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherScriptComponentsTarget = matcher;
            }

            return _matcherScriptComponentsTarget;
        }
    }
}
